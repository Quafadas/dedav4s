name: CI
on:
  push:
    branches:
      - main
    tags:
      - "v*"
  pull_request:
    branches:
      - main

permissions:
  id-token: write
  pages: write
  contents: read

concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  build:
    name: Build and Test
    strategy:
      matrix:
        os: [ubuntu-latest]
        scala: [3]
        java: [temurin@17]
        project: [js, jvm]
    runs-on: ${{ matrix.os }}
    steps:
      - name: formatCheck
        run: ./mill mill.scalalib.scalafmt.ScalafmtModule/checkFormatAll __.sources
      - uses: actions/checkout@main
        with:
          fetch-depth: 0
          fetch-tags: true
      - uses: coursier/cache-action@v6.4
      - if: matrix.project == 'jvm'
        name: playwright
        run: cs launch com.microsoft.playwright:playwright:1.51.0 -M "com.microsoft.playwright.CLI" -- install --with-deps
      - name: Compile
        run: ./mill __.compile
      - name: test
        run: ./mill core.{{matrix.project}}.test


  publish:
    if: github.repository == 'Quafadas/scautable' && contains(github.ref, 'refs/tags/')
    needs: test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@main
        with:
          fetch-depth: 0
          fetch-tags: true
      - uses: actions/setup-java@main
        with:
          distribution: 'temurin'
          java-version: 17
      - name: Setup GPG secrets
        run: |
          gpg --version
          cat <(echo "${{ secrets.PUBLISH_SECRET_KEY }}") | base64 --decode | gpg --batch --import
          gpg --list-secret-keys --keyid-format LONG
      - name: Publish to Maven Central
        run: ./mill -i mill.scalalib.PublishModule/publishAll --sonatypeUri https://s01.oss.sonatype.org/service/local --sonatypeCreds "${{ secrets.PUBLISH_USER }}:${{ secrets.PUBLISH_PASSWORD }}" --gpgArgs "--passphrase=${{ secrets.PUBLISH_SECRET_KEY_PASSWORD}},--batch,--yes,-a,-b,--pinentry-mode,loopback" --readTimeout 1200000 --awaitTimeout 1200000 --release true --signed true

  # Check that we can _generate_ the docs, but don't run upload / pages actions to actually deploy them for pull requests.
  site_pr_check:
    if: github.event_name == 'pull_request'
    needs: test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: 'temurin'
      - uses: actions/checkout@main
        with:
          fetch-depth: 0
          fetch-tags: true
      - run: ./mill site.publishDocs

  site:
    if: github.event_name != 'pull_request' && github.ref == 'refs/heads/main'
    needs: test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: 'temurin'
      - uses: actions/checkout@main
        with:
          fetch-depth: 0
          fetch-tags: true
      - run: ./mill site.publishDocs
      - name: Setup Pages
        uses: actions/configure-pages@main
      - uses: actions/upload-artifact@main
        with:
          name: page
          path: out/site/publishDocs.dest
          if-no-files-found: error

  deploy:
    needs: site
    permissions:
      pages: write
      id-token: write
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/download-artifact@main
        with:
          name: page
          path: .
      - uses: actions/configure-pages@main
      - uses: actions/upload-pages-artifact@main
        with:
          path: .
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@main